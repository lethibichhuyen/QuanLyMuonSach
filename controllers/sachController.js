const mongoose = require("mongoose");
const { Sach, NhaXuatBan } = require("../models/model");

// üìå L·∫•y t·∫•t c·∫£ s√°ch
exports.getAll = async (req, res) => {
  try {
    const data = await Sach.find().populate("MaNXB", "MaNXB TenNXB");
    res.json(data);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch s√°ch", error });
  }
};

// üìå L·∫•y s√°ch theo ID
exports.getById = async (req, res) => {
  try {
    const data = await Sach.findById(req.params.id).populate(
      "MaNXB",
      "MaNXB TenNXB"
    );
    if (!data) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
    }
    res.json(data);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y s√°ch", error });
  }
};

// üìå T·∫°o s√°ch m·ªõi
exports.create = async (req, res) => {
  try {
    console.log("üìå D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    const { TenSach, TacGia, DonGia, SoQuyen, NamXuatBan, MaNXB } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!TenSach || !TacGia || !DonGia || !SoQuyen || !NamXuatBan || !MaNXB) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // T√¨m nh√† xu·∫•t b·∫£n b·∫±ng `MaNXB`
    const nxb = await NhaXuatBan.findOne({ MaNXB });
    if (!nxb) {
      return res
        .status(400)
        .json({ message: `Nh√† xu·∫•t b·∫£n v·ªõi MaNXB: ${MaNXB} kh√¥ng t·ªìn t·∫°i!` });
    }

    // T·∫°o m√£ s√°ch t·ª± ƒë·ªông
    const lastBook = await Sach.findOne().sort({ MaSach: -1 }).select("MaSach");
    let newMaSach = "S001";
    if (lastBook && lastBook.MaSach) {
      const lastNumber = parseInt(lastBook.MaSach.slice(1), 10);
      newMaSach = `S${String(lastNumber + 1).padStart(3, "0")}`;
    }

    // T·∫°o s√°ch m·ªõi
    const newSach = new Sach({
      MaSach: newMaSach,
      TenSach,
      TacGia,
      DonGia,
      SoQuyen,
      NamXuatBan,
      MaNXB: nxb._id,
    });

    const data = await newSach.save();
    console.log("‚úÖ S√°ch ƒë√£ l∆∞u:", data);
    res.status(201).json(data);
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o s√°ch:", error);
    res.status(500).json({ message: "L·ªói t·∫°o s√°ch", error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t s√°ch
exports.update = async (req, res) => {
  try {
    console.log("üìå D·ªØ li·ªáu c·∫≠p nh·∫≠t:", req.body);

    let updatedData = { ...req.body };

    if (req.body.MaNXB) {
      const nxb = await NhaXuatBan.findOne({ MaNXB: req.body.MaNXB });
      if (!nxb) {
        return res.status(400).json({
          message: `Nh√† xu·∫•t b·∫£n v·ªõi MaNXB: ${req.body.MaNXB} kh√¥ng t·ªìn t·∫°i`,
        });
      }
      updatedData.MaNXB = nxb._id;
    }

    const data = await Sach.findByIdAndUpdate(req.params.id, updatedData, {
      new: true,
    }).populate("MaNXB", "MaNXB TenNXB");

    if (!data) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
    }

    res.json(data);
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s√°ch:", error);
    res
      .status(500)
      .json({ message: "L·ªói c·∫≠p nh·∫≠t s√°ch", error: error.message });
  }
};

// üìå X√≥a s√°ch
exports.delete = async (req, res) => {
  try {
    const sach = await Sach.findById(req.params.id);
    if (!sach) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ x√≥a" });
    }

    await Sach.findByIdAndDelete(req.params.id);
    res.json({ message: "X√≥a s√°ch th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x√≥a s√°ch", error });
  }
};
