const { NhaXuatBan } = require("../models/model.js"); // ‚úÖ Import NXB ƒë√∫ng c√°ch

// H√†m l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n
exports.getAll = async (req, res) => {
  try {
    const data = await NhaXuatBan.find(); // üëà S·ª≠ d·ª•ng NXB.find()
    res.json(data);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n:", error);
    res.status(500).json({
      message: "L·ªói l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n",
      error: error.message,
    });
  }
};

exports.getById = async (req, res) => {
  try {
    // Populate ƒë·ªÉ l·∫•y th√¥ng tin MaNXB t·ª´ b·∫£ng NXB
    const data = await Sach.findById(req.params.id).populate("MaNXB", "MaNXB");
    res.json(data);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y s√°ch", error });
  }
};

exports.create = async (req, res) => {
  try {
    console.log("üìå D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    if (!req.body.TenNXB || !req.body.DiaChi) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin nh√† xu·∫•t b·∫£n" });
    }

    // üîπ L·∫•y m√£ NXB l·ªõn nh·∫•t
    const lastNXB = await NhaXuatBan.findOne().sort({ MaNXB: -1 });

    let newMaNXB = "NXB01"; // N·∫øu database ch∆∞a c√≥ d·ªØ li·ªáu

    if (lastNXB && lastNXB.MaNXB) {
      // L·∫•y s·ªë cu·ªëi c√πng c·ªßa MaNXB (VD: "NXB12" => 12)
      const lastNumber = parseInt(lastNXB.MaNXB.replace("NXB", ""), 10);
      newMaNXB = `NXB${String(lastNumber + 1).padStart(2, "0")}`; // TƒÉng s·ªë l√™n 1
    }

    // T·∫°o m·ªõi Nh√† Xu·∫•t B·∫£n
    const newNXB = new NhaXuatBan({
      MaNXB: newMaNXB,
      TenNXB: req.body.TenNXB,
      DiaChi: req.body.DiaChi,
    });

    await newNXB.save();
    res.status(201).json(newNXB);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o nh√† xu·∫•t b·∫£n:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

exports.update = async (req, res) => {
  try {
    console.log("üìå D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    // Ki·ªÉm tra xem nh√† xu·∫•t b·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
    const nxb = await NhaXuatBan.findById(req.params.id);
    if (!nxb) {
      return res.status(404).json({ message: "Nh√† xu·∫•t b·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin nh√† xu·∫•t b·∫£n
    const updatedNXB = await NhaXuatBan.findByIdAndUpdate(
      req.params.id,
      req.body,
      {
        new: true, // Tr·∫£ v·ªÅ d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
        runValidators: true, // Ki·ªÉm tra validation
      }
    );

    res.json(updatedNXB);
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n:", error);
    res
      .status(500)
      .json({ message: "L·ªói c·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n", error: error.message });
  }
};

exports.delete = async (req, res) => {
  try {
    await NhaXuatBan.findByIdAndDelete(req.params.id);
    res.json({ message: "X√≥a NXB th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x√≥a nh√† xu·∫•t b·∫£n", error });
  }
};
